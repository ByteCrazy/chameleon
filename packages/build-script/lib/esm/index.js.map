{
  "version": 3,
  "sources": ["../../src/config/base.ts", "../../src/core/devServer.ts", "../../src/config/vite.dev.ts", "../../src/config/vite.common.ts", "../../src/core/doBuild.ts", "../../src/config/vite.build.ts", "../../src/index.ts"],
  "sourcesContent": ["import path from 'path';\nimport fs from 'fs-extra';\nimport { LibraryOptions, UserConfig } from 'vite';\nimport argv from 'yargs-parser';\n\nconst cliArgs: {\n  dev: boolean;\n  build: boolean;\n  watch: boolean;\n} = argv(process.argv.slice(2)) as any;\n\nexport const CLI_ARGS_OBJ = cliArgs;\n\nexport const PROJECT_ROOT = path.resolve(process.cwd());\n\nlet customConfig: any = {};\n\nconst customConfigPath = `${PROJECT_ROOT}/build.config.js`;\n\nif (fs.pathExistsSync(customConfigPath)) {\n  customConfig = require(customConfigPath);\n}\n\nexport type BuildScriptConfig = {\n  entry: string;\n  libName?: string;\n  fileName?: string;\n  external?: string[];\n  global?: Record<string, string>;\n  formats?: LibraryOptions['formats'];\n  vite?: UserConfig;\n};\n\nexport const CUSTOM_CONFIG: BuildScriptConfig = customConfig;\n", "import { createServer } from 'vite';\n\nimport { devConfig } from '../config/vite.dev';\n\nexport const doDev = async () => {\n  const server = await createServer(devConfig());\n  await server.listen();\n\n  server.printUrls();\n};\n", "import { mergeConfig } from 'vite';\nimport { commonConfig } from './vite.common';\nimport { CUSTOM_CONFIG } from './base';\n\n// https://vitejs.dev/config/\nexport const devConfig = () => {\n  const config = mergeConfig(commonConfig(), {\n    mode: 'development',\n    configFile: false,\n    server: {\n      port: 3000,\n    },\n  });\n  return mergeConfig(config, CUSTOM_CONFIG.vite || {});\n};\n", "import { defineConfig } from 'vite';\nimport path from 'path';\nimport react from '@vitejs/plugin-react';\nimport eslint from 'vite-plugin-eslint';\nimport dts from 'vite-plugin-dts';\nimport { PROJECT_ROOT, CUSTOM_CONFIG } from './base';\n\n// https://vitejs.dev/config/\nexport const commonConfig = () => {\n  if (!CUSTOM_CONFIG.entry) {\n    throw new Error('entry not find');\n  }\n  return defineConfig({\n    root: PROJECT_ROOT,\n    build: {\n      lib: {\n        name: CUSTOM_CONFIG.libName,\n        entry: path.resolve(PROJECT_ROOT, CUSTOM_CONFIG.entry),\n        formats: CUSTOM_CONFIG.formats || ['cjs', 'es'],\n        fileName: (format) => `${CUSTOM_CONFIG.fileName || CUSTOM_CONFIG.libName}.${format}.js`,\n      },\n      rollupOptions: {\n        // \u786E\u4FDD\u5916\u90E8\u5316\u5904\u7406\u90A3\u4E9B\u4F60\u4E0D\u60F3\u6253\u5305\u8FDB\u5E93\u7684\u4F9D\u8D56\n        external: CUSTOM_CONFIG.external || [],\n        output: {\n          // \u5728 UMD \u6784\u5EFA\u6A21\u5F0F\u4E0B\u4E3A\u8FD9\u4E9B\u5916\u90E8\u5316\u7684\u4F9D\u8D56\u63D0\u4F9B\u4E00\u4E2A\u5168\u5C40\u53D8\u91CF\n          globals: CUSTOM_CONFIG.global || {},\n        },\n      },\n    },\n    plugins: [\n      eslint(),\n      react(),\n      dts({\n        skipDiagnostics: false,\n        logDiagnostics: true,\n      }),\n    ],\n  });\n};\n", "import { build } from 'vite';\n\nimport { buildConfig } from '../config/vite.build';\n\nexport const doBuild = async () => {\n  console.log('start to build .....');\n  await build(buildConfig());\n  console.log('build finished.');\n};\n", "import { mergeConfig } from 'vite';\nimport { CLI_ARGS_OBJ, CUSTOM_CONFIG } from './base';\nimport { commonConfig } from './vite.common';\n\n// https://vitejs.dev/config/\nexport const buildConfig = function () {\n  const config = mergeConfig(commonConfig(), {\n    mode: 'production',\n    configFile: false,\n    build: {\n      watch: CLI_ARGS_OBJ.watch ?? false,\n    },\n  });\n  return mergeConfig(config, CUSTOM_CONFIG.vite || {});\n};\n", "#!/usr/bin/env node\nimport { CLI_ARGS_OBJ } from './config/base';\nimport { doDev } from './core/devServer';\nimport { doBuild } from './core/doBuild';\n\nfunction run() {\n  if (CLI_ARGS_OBJ.build) {\n    doBuild();\n  } else {\n    doDev();\n  }\n}\n\nrun();\n"],
  "mappings": ";;;;;;;;;;AAAA,OAAO,UAAU;AACjB,OAAO,QAAQ;AAEf,OAAO,UAAU;AAEjB,IAAM,UAIF,KAAK,QAAQ,KAAK,MAAM,CAAC,CAAC;AAEvB,IAAM,eAAe;AAErB,IAAM,eAAe,KAAK,QAAQ,QAAQ,IAAI,CAAC;AAEtD,IAAI,eAAoB,CAAC;AAEzB,IAAM,mBAAmB,GAAG;AAE5B,IAAI,GAAG,eAAe,gBAAgB,GAAG;AACvC,iBAAe,UAAQ;AACzB;AAYO,IAAM,gBAAmC;;;ACjChD,SAAS,oBAAoB;;;ACA7B,SAAS,mBAAmB;;;ACA5B,SAAS,oBAAoB;AAC7B,OAAOA,WAAU;AACjB,OAAO,WAAW;AAClB,OAAO,YAAY;AACnB,OAAO,SAAS;AAIT,IAAM,eAAe,MAAM;AAChC,MAAI,CAAC,cAAc,OAAO;AACxB,UAAM,IAAI,MAAM,gBAAgB;AAAA,EAClC;AACA,SAAO,aAAa;AAAA,IAClB,MAAM;AAAA,IACN,OAAO;AAAA,MACL,KAAK;AAAA,QACH,MAAM,cAAc;AAAA,QACpB,OAAOC,MAAK,QAAQ,cAAc,cAAc,KAAK;AAAA,QACrD,SAAS,cAAc,WAAW,CAAC,OAAO,IAAI;AAAA,QAC9C,UAAU,CAAC,WAAW,GAAG,cAAc,YAAY,cAAc,WAAW;AAAA,MAC9E;AAAA,MACA,eAAe;AAAA,QAEb,UAAU,cAAc,YAAY,CAAC;AAAA,QACrC,QAAQ;AAAA,UAEN,SAAS,cAAc,UAAU,CAAC;AAAA,QACpC;AAAA,MACF;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,OAAO;AAAA,MACP,MAAM;AAAA,MACN,IAAI;AAAA,QACF,iBAAiB;AAAA,QACjB,gBAAgB;AAAA,MAClB,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACH;;;ADlCO,IAAM,YAAY,MAAM;AAC7B,QAAM,SAAS,YAAY,aAAa,GAAG;AAAA,IACzC,MAAM;AAAA,IACN,YAAY;AAAA,IACZ,QAAQ;AAAA,MACN,MAAM;AAAA,IACR;AAAA,EACF,CAAC;AACD,SAAO,YAAY,QAAQ,cAAc,QAAQ,CAAC,CAAC;AACrD;;;ADVO,IAAM,QAAQ,YAAY;AAC/B,QAAM,SAAS,MAAM,aAAa,UAAU,CAAC;AAC7C,QAAM,OAAO,OAAO;AAEpB,SAAO,UAAU;AACnB;;;AGTA,SAAS,aAAa;;;ACAtB,SAAS,eAAAC,oBAAmB;AAKrB,IAAM,cAAc,WAAY;AALvC;AAME,QAAM,SAASC,aAAY,aAAa,GAAG;AAAA,IACzC,MAAM;AAAA,IACN,YAAY;AAAA,IACZ,OAAO;AAAA,MACL,QAAO,kBAAa,UAAb,YAAsB;AAAA,IAC/B;AAAA,EACF,CAAC;AACD,SAAOA,aAAY,QAAQ,cAAc,QAAQ,CAAC,CAAC;AACrD;;;ADVO,IAAM,UAAU,YAAY;AACjC,UAAQ,IAAI,sBAAsB;AAClC,QAAM,MAAM,YAAY,CAAC;AACzB,UAAQ,IAAI,iBAAiB;AAC/B;;;AEHA,SAAS,MAAM;AACb,MAAI,aAAa,OAAO;AACtB,YAAQ;AAAA,EACV,OAAO;AACL,UAAM;AAAA,EACR;AACF;AAEA,IAAI;",
  "names": ["path", "path", "mergeConfig", "mergeConfig"]
}
